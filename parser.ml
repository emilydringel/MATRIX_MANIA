type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | SIZE
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | ISEQ
  | NOTEQ
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | IN
  | WHILE
  | BREAK
  | CONTINUE
  | NONE
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | DEF
  | MAIN
  | IMPORT
  | DEFINE
  | EOF

open Parsing;;
let _ = parse_error;;
# 6 "parser.mly"

# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* MOD *);
  270 (* ASSIGN *);
  271 (* NOT *);
  272 (* SIZE *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* AND *);
  280 (* OR *);
  281 (* ISEQ *);
  282 (* NOTEQ *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELIF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* IN *);
  289 (* WHILE *);
  290 (* BREAK *);
  291 (* CONTINUE *);
  292 (* NONE *);
  297 (* DEF *);
  298 (* MAIN *);
  299 (* IMPORT *);
  300 (* DEFINE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  293 (* LITERAL *);
  294 (* BLIT *);
  295 (* ID *);
  296 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\005\000\004\000\004\000\
\004\000\009\000\010\000\010\000\011\000\011\000\008\000\007\000\
\007\000\013\000\013\000\014\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\015\000\015\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\018\000\018\000\019\000\019\000\016\000\017\000\
\017\000\020\000\020\000\000\000"

let yylen = "\002\000\
\005\000\000\000\004\000\000\000\005\000\007\000\000\000\002\000\
\002\000\008\000\000\000\001\000\001\000\003\000\004\000\000\000\
\002\000\000\000\002\000\007\000\002\000\002\000\002\000\003\000\
\003\000\008\000\012\000\011\000\007\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\002\000\003\000\
\004\000\003\000\001\000\003\000\001\000\003\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\008\000\009\000\
\000\000\000\000\000\000\000\000\000\000\036\000\032\000\034\000\
\000\000\033\000\000\000\035\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\053\000\054\000\055\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\013\000\000\000\000\000\000\000\
\060\000\062\000\057\000\000\000\000\000\000\000\016\000\000\000\
\016\000\014\000\000\000\000\000\016\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\023\000\021\000\
\025\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\018\000\000\000\
\029\000\000\000\000\000\000\000\000\000\019\000\016\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\027\000\000\000\
\000\000\020\000"

let yydgoto = "\002\000\
\003\000\004\000\006\000\009\000\014\000\109\000\099\000\015\000\
\016\000\086\000\087\000\110\000\138\000\142\000\114\000\028\000\
\066\000\035\000\036\000\067\000"

let yysindex = "\015\000\
\000\000\000\000\000\000\214\254\241\254\239\254\067\255\248\254\
\009\255\000\000\039\000\066\255\229\254\083\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
\000\255\000\000\105\000\000\000\039\000\093\255\101\255\000\000\
\159\001\250\001\099\255\107\255\000\000\000\000\000\000\039\000\
\039\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\131\000\076\255\114\255\000\000\039\000\039\000\000\000\
\012\002\115\255\113\255\012\002\062\255\062\255\000\000\000\000\
\000\000\066\002\066\002\100\255\100\255\100\255\100\255\048\002\
\030\002\100\255\100\255\000\000\000\000\121\255\127\255\136\255\
\000\000\000\000\000\000\039\000\139\255\105\255\000\000\012\002\
\000\000\000\000\051\255\092\255\000\000\000\000\039\000\147\255\
\148\255\149\255\151\255\152\255\157\000\000\000\000\000\132\255\
\012\002\153\255\039\000\039\000\039\000\000\000\000\000\000\000\
\000\000\000\000\183\001\156\255\207\001\154\255\039\000\160\255\
\032\000\183\000\000\000\169\255\039\000\171\255\000\000\176\255\
\000\000\033\255\178\255\181\255\184\255\000\000\000\000\039\000\
\032\000\210\255\231\001\185\255\000\000\187\255\000\000\032\000\
\188\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\237\254\000\000\030\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\255\182\255\000\000\000\000\000\000\000\000\189\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\193\255\000\000\000\000\000\000\000\000\000\000\
\020\255\000\000\194\255\057\255\209\000\235\000\000\000\000\000\
\000\000\138\255\177\255\005\001\031\001\057\001\083\001\216\255\
\069\255\109\001\135\001\000\000\000\000\000\000\200\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\255\
\000\000\000\000\000\000\000\000\000\000\000\000\212\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\255\000\000\000\000\212\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\255\000\000\000\000\000\000\
\000\000\249\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\245\255\172\255\000\000\
\000\000\000\000\000\000\130\255\000\000\000\000\144\255\000\000\
\000\000\159\000\164\000\000\000"

let yytablesize = 860
let yytable = "\027\000\
\005\000\040\000\132\000\124\000\059\000\033\000\034\000\037\000\
\038\000\039\000\059\000\030\000\100\000\041\000\031\000\001\000\
\112\000\058\000\148\000\004\000\136\000\004\000\066\000\007\000\
\004\000\153\000\008\000\066\000\065\000\068\000\011\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\134\000\012\000\
\067\000\013\000\034\000\034\000\017\000\067\000\101\000\102\000\
\018\000\056\000\146\000\056\000\019\000\140\000\141\000\056\000\
\056\000\020\000\021\000\010\000\007\000\052\000\007\000\052\000\
\045\000\046\000\047\000\052\000\052\000\103\000\104\000\029\000\
\096\000\105\000\032\000\106\000\107\000\108\000\022\000\023\000\
\024\000\025\000\026\000\113\000\052\000\017\000\059\000\101\000\
\111\000\018\000\031\000\063\000\031\000\019\000\060\000\123\000\
\113\000\125\000\020\000\021\000\043\000\044\000\045\000\046\000\
\047\000\064\000\085\000\130\000\088\000\091\000\103\000\104\000\
\092\000\113\000\105\000\093\000\106\000\107\000\108\000\022\000\
\023\000\024\000\025\000\026\000\147\000\017\000\094\000\101\000\
\121\000\018\000\043\000\095\000\043\000\019\000\097\000\098\000\
\043\000\043\000\020\000\021\000\115\000\116\000\117\000\118\000\
\119\000\122\000\043\000\043\000\127\000\129\000\103\000\104\000\
\043\000\043\000\105\000\131\000\106\000\107\000\108\000\022\000\
\023\000\024\000\025\000\026\000\017\000\135\000\101\000\137\000\
\018\000\044\000\139\000\044\000\019\000\143\000\144\000\044\000\
\044\000\020\000\021\000\145\000\061\000\151\000\152\000\064\000\
\154\000\044\000\044\000\011\000\065\000\103\000\104\000\044\000\
\044\000\105\000\012\000\106\000\107\000\108\000\022\000\023\000\
\024\000\025\000\026\000\017\000\030\000\101\000\149\000\018\000\
\051\000\030\000\051\000\019\000\089\000\000\000\051\000\051\000\
\020\000\021\000\090\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\103\000\104\000\051\000\051\000\
\105\000\000\000\106\000\107\000\108\000\022\000\023\000\024\000\
\025\000\026\000\026\000\000\000\026\000\026\000\026\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\026\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\000\000\000\000\026\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\017\000\000\000\101\000\000\000\018\000\000\000\000\000\
\017\000\019\000\000\000\000\000\018\000\000\000\020\000\021\000\
\019\000\000\000\000\000\000\000\000\000\020\000\021\000\000\000\
\000\000\000\000\103\000\104\000\000\000\000\000\105\000\000\000\
\106\000\107\000\108\000\022\000\023\000\024\000\025\000\026\000\
\000\000\000\000\022\000\023\000\024\000\025\000\026\000\037\000\
\000\000\037\000\000\000\000\000\000\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\000\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\084\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\038\000\000\000\038\000\000\000\000\000\000\000\038\000\
\038\000\038\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\039\000\000\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\045\000\000\000\045\000\
\000\000\000\000\000\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\046\000\
\000\000\046\000\000\000\000\000\000\000\046\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\047\000\000\000\047\000\000\000\000\000\000\000\047\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\048\000\000\000\048\000\000\000\000\000\
\000\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\049\000\000\000\049\000\
\000\000\000\000\000\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\050\000\
\000\000\050\000\000\000\000\000\000\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\061\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\126\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\128\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\150\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\062\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\000\000\056\000\057\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\056\000\057\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\000\000\000\000\056\000\057\000"

let yycheck = "\011\000\
\043\001\002\001\129\000\116\000\001\001\017\000\018\000\019\000\
\020\000\021\000\007\001\039\001\097\000\014\001\042\001\001\000\
\101\000\029\000\145\000\039\001\133\000\041\001\003\001\039\001\
\044\001\152\000\044\001\008\001\040\000\041\000\039\001\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\131\000\039\001\
\003\001\041\001\062\000\063\000\002\001\008\001\004\001\005\001\
\006\001\001\001\143\000\003\001\010\001\029\001\030\001\007\001\
\008\001\015\001\016\001\001\001\039\001\001\001\041\001\003\001\
\011\001\012\001\013\001\007\001\008\001\027\001\028\001\014\001\
\092\000\031\001\000\000\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\103\000\024\001\002\001\002\001\004\001\
\005\001\006\001\001\001\001\001\003\001\010\001\002\001\115\000\
\116\000\117\000\015\001\016\001\009\001\010\001\011\001\012\001\
\013\001\007\001\039\001\127\000\003\001\003\001\027\001\028\001\
\008\001\133\000\031\001\003\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\144\000\002\001\008\001\004\001\
\005\001\006\001\001\001\004\001\003\001\010\001\004\001\039\001\
\007\001\008\001\015\001\016\001\002\001\002\001\002\001\001\001\
\001\001\001\001\017\001\018\001\001\001\004\001\027\001\028\001\
\023\001\024\001\031\001\004\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\002\001\005\001\004\001\005\001\
\006\001\001\001\003\001\003\001\010\001\004\001\002\001\007\001\
\008\001\015\001\016\001\004\001\007\001\005\001\004\001\003\001\
\005\001\017\001\018\001\003\001\003\001\027\001\028\001\023\001\
\024\001\031\001\003\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\002\001\001\001\004\001\005\001\006\001\
\001\001\003\001\003\001\010\001\062\000\255\255\007\001\008\001\
\015\001\016\001\063\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\023\001\024\001\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\002\001\255\255\004\001\005\001\006\001\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\002\001\255\255\004\001\255\255\006\001\255\255\255\255\
\002\001\010\001\255\255\255\255\006\001\255\255\015\001\016\001\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\255\255\
\255\255\255\255\027\001\028\001\255\255\255\255\031\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  SIZE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  ISEQ\000\
  NOTEQ\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  IN\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  NONE\000\
  DEF\000\
  MAIN\000\
  IMPORT\000\
  DEFINE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'imports) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'defines) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'main) in
    Obj.repr(
# 39 "parser.mly"
                                 ( _2 )
# 485 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                               ( []     )
# 491 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'imports) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 43 "parser.mly"
                           ( _3 :: _1 )
# 499 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                               ( []     )
# 505 "parser.ml"
               : 'defines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'defines) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                                ( _3 :: Define(_3, _4) )
# 514 "parser.ml"
               : 'defines))
; (fun __caml_parser_env ->
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
    ( { 
	 body = List.rev _6 } )
# 522 "parser.ml"
               : 'main))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                 ( ([], [])               )
# 528 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 57 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 536 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 58 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 63 "parser.mly"
     ( { fname = _2;
	 formals = List.rev _4;
	 body = List.rev _7 } )
# 555 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                  ( [] )
# 561 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 69 "parser.mly"
                  ( _1 )
# 568 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                         ( [_1]     )
# 575 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
                         ( _3 :: _1 )
# 583 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                       ( _1 )
# 591 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                   ( [] )
# 597 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 96 "parser.mly"
                   ( _2 :: _1 )
# 605 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                         ( [] )
# 611 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif) in
    Obj.repr(
# 100 "parser.mly"
                    ( _2 :: _1 )
# 619 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 103 "parser.mly"
                                             ( (_3, _6) )
# 627 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                            ( Expr _1               )
# 634 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
                                            ( Break                 )
# 640 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                                            ( Continue              )
# 646 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 109 "parser.mly"
                                            ( Return _2             )
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 110 "parser.mly"
                                            ( Block(List.rev _2)    )
# 660 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 112 "parser.mly"
                                                                    ( If(_3, _6, _8, Block([])) )
# 669 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'stmt) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'elif_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 114 "parser.mly"
                                            ( If(_3, _6, _8, _11)        )
# 679 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 116 "parser.mly"
                                            ( For(_3, _5, _7, _10)   )
# 689 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 117 "parser.mly"
                                                              ( While(_3, _6)         )
# 697 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                  ( Noexpr )
# 703 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                  ( _1 )
# 710 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 124 "parser.mly"
                     ( Literal(_1)            )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
                    ( Fliteral(_1)           )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 126 "parser.mly"
                     ( BoolLit(_1)            )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_lit) in
    Obj.repr(
# 127 "parser.mly"
                     ( MatrixLit(_1)          )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                     ( None                   )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
                     ( Id(_1)                 )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                     ( Binop(_1, ISEQ, _3)    )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                     ( Binop(_1, NOTEQ,   _3) )
# 855 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                         ( Unop(Neg, _2)      )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                     ( Unop(Not, _2)          )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                     ( Unop(Size, _2)         )
# 892 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                     ( Assign(_1, _3)         )
# 900 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 149 "parser.mly"
                              ( Call(_1, _3)  )
# 908 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                       ( _2                   )
# 915 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                           ( [_1] )
# 922 "parser.ml"
               : 'matrix_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row) in
    Obj.repr(
# 159 "parser.mly"
                           ( _1 :: _3 )
# 930 "parser.ml"
               : 'matrix_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row) in
    Obj.repr(
# 162 "parser.mly"
                              ( [_1] )
# 937 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matrix_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row_list) in
    Obj.repr(
# 163 "parser.mly"
                                     ( _1 :: _3 )
# 945 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matrix_row_list) in
    Obj.repr(
# 166 "parser.mly"
                               ( _2 )
# 952 "parser.ml"
               : 'matrix_lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "parser.mly"
                  ( [] )
# 958 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 171 "parser.mly"
               ( List.rev _1 )
# 965 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                            ( [_1] )
# 972 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                         ( _3 :: _1 )
# 980 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
